using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace ProjectEuler.Solutions
{
    public class ProblemService
    {
        public ProblemService()
        {
            LoadSolutions();
        }

        private IEnumerable<ISolution> solutions;

        private List<Problem> problemz = new List<Problem>()
            {
                new Problem("Multiples of 3 and 5", @"
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.", 1),
                new Problem("Even Fibonacci numbers", @"Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.",2 ),
                   new Problem("Largest prime factor", @"The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?",3 )
            };


        public void LoadSolutions()
        {
            solutions = SolutionLoader.Load<ISolution>(
                new string[]
                {
                    @"C:\repositories\ProjectEuler.SolutionPlugins"
                });
        }

        public Task<IEnumerable<IProblem>> GetProblemsAsync()
        {
            return Task.FromResult(problemz.OfType<IProblem>());
        }

        public bool HasSolution(IProblem problem)
        {
            var existingSolutions = solutions.Where(x => x.ProblemNumber == problem.Number);
            return existingSolutions.Any();
        }

        public Task<IBenchmarkedSolution> GetBenchmarkedSolutionAsync(IProblem problem)
        {
            var problemToResolve = problemz.Single(x => x.Title == problem.Title);
            var existingSolutions = solutions.Where(x => x.ProblemNumber == problem.Number);
            if (!HasSolution(problem))
            {
                throw new InvalidOperationException("problem not solved");
            }

            return Task.FromResult((IBenchmarkedSolution)BenchmarkedSolution.Create(existingSolutions.First()));
        }

    }


}
