@page "/"
@using Data;
@using ProjectEuler.Solutions
@inject SolutionService problemService

<h3>Welcom everabady</h3>

    <input type="number" @bind-value="ProblemsFrom"/>
<input type="number" @bind-value="ProblemsTo"/>

    <button @onclick="async () => await GetProblemModels(ProblemsFrom,ProblemsTo)">Reload problems</button>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Solved</th>
                <th>Answer</th>
                <th>Time</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var problemModel in problemModels)
            {
                var problem = problemModel.Problem;
            <tr>
                <td>@problem.Title</td>
                <td>@problem.Description</td>
                <td>@problemModel.IsSolved.</td>
                @if (!problemModel.ShownSolution)
                {
                    if (@problemModel.IsSolved)
                    {
                        <td><button @onclick="()=> ShowSolution(problemModel)">Show solution</button></td>
                    }
                    else
                    {
                        <td>No solution available</td>
                    }
                }
                else
                {
                    <td>Elapsed in: @problemModel.Solution.ElapsedMiliseconds : @problemModel.Solution.GetAnswer()</td>
                }

            </tr>
            }
        </tbody>
    </table>
@code {
    private int ProblemsFrom;
    private int ProblemsTo;
    private async void ShowSolution(ProblemModel model)
    {

        model.ShownSolution = true;
        var solution = await problemService.GetBenchmarkedSolutionAsync(model.Problem);
        model.Solution = solution;
    }
    private static IList<ProblemModel> problemModels = new List<ProblemModel>();

    protected override async Task OnInitializedAsync()
    {


    }

    private async Task GetProblemModels(int from, int to)
    {
        var problems = await problemService.GetProblemsAsync(from, to);
        problemModels = problems
            .Select(x => new ProblemModel(x, problemService.HasSolution(x)))
            .ToList();
    }
}
